# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    Python310-onnx:
      python.version: '3.10'
      onnx.standard: '1'
      test.examples: '1'
    Python39-onnx:
      python.version: '3.9'
      onnx.standard: '1'
      test.examples: '0'
    Python39-expe:
      python.version: '3.9'
      onnx.standard: '0'
      test.examples: '0'
    Python38-expe:
      python.version: '3.8'
      onnx.standard: '0'
      test.examples: '0'
    Python37-expe:
      python.version: '3.7'
      onnx.standard: '0'
      test.examples: '0'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip setuptools wheel
    python -m pip install -r requirements-dev.txt
  displayName: 'Install dependencies'

- script: |
      if [ '$(onnx.standard)' == '1' ]
        then
          python -m pip uninstall -y onnx-function-experiment
          python -m pip uninstall -y ort-function-experiment-nightly
          python -m pip install onnx onnxruntime
      fi
  displayName: 'Install onnx'

- script: |
    python setup.py sdist
  displayName: 'make package'

- script: |
    pytest -v onnxscript --cov=onnxscript --cov-report term-missing
  displayName: 'pytest'

- script: |
    python setup.py install
  displayName: 'install package'

- script: |
      if [ '$(test.examples)' == '1' ]
        then
          pytest -v docs/test
      fi
  displayName: 'Test examples'

- script: |
    python -m sphinx docs dist/html
  displayName: 'documentation'
