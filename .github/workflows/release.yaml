name: Release

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  release:
    if: github.event_name != 'pull_request' || startsWith(github.base_ref, 'rel-') || contains(github.event.pull_request.labels.*.name, 'run release CIs')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - name: Checkout ONNX Script
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip build wheel
      - name: Temporarily rename package to onnx-preview
        run: |
          sed -i 's/name = "onnxscript"/name = "onnxscript-preview"/' 'pyproject.toml'
      - name: Build ONNX Script wheel dev version
        run: |
          python -m build
        if: (!(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')))
      - name: Build ONNX Script wheel release version
        run: |
          python -m build
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          ONNX_SCRIPT_RELEASE: 1
      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Install ONNX Script wheel
        run: |
          python -m pip install dist/*.whl

  test-wheel:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ONNX Script
        uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r requirements-dev.txt
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Install wheel
        run: |
          python -m pip install dist/*.whl --no-deps
      - name: Run tests
        run: |
          python -m pytest -v -n auto

  publish-dev:
    needs: [release]
    runs-on: ubuntu-latest
    environment: PyPI Dev
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      # See https://docs.pypi.org/trusted-publishers/using-a-publisher/
      id-token: write
    # Publish only when it is a scheduled run (dev builds)
    if: github.event_name == 'schedule' && !startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      # TODO: Check the version number is a dev version
      - name: Publish dev version to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-release:
    needs: [release]
    runs-on: ubuntu-latest
    environment: PyPI
    # Publish only when it is a tag push with version number
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      # TODO: Check the tag name matches the VERSION file
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
